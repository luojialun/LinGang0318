package com.lingang.http;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.text.TextUtils;
import android.util.Log;

import com.google.gson.Gson;
import com.lingang.App;
import com.lingang.activity.login.LoginAc;
import com.lingang.bean.BaseEntity;
import com.lingang.common.LoginManager;
import com.lingang.dialog.DialogOne2;
import com.lingang.utils.AppUtils;
import com.lingang.utils.HttpLoading;
import com.lingang.utils.ToastUtils;
import com.lzy.okgo.OkGo;
import com.lzy.okgo.callback.AbsCallback;
import com.lzy.okgo.request.BaseRequest;

import org.json.JSONException;
import org.json.JSONObject;

import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;

import okhttp3.Call;
import okhttp3.Response;

/**
 * Created by Administrator on 2017/3/31 0031.
 */

public abstract class ResCallBack<T> extends AbsCallback<T> {

    private ProgressDialog loadingDialog;
    private Context context;
    private boolean isShowLoading = true;


    public ResCallBack(Context context) {
        this.context = context;
        initLoadingDialog(context);
    }

    public ResCallBack(Context context, boolean isShowLoading) {
        this.context = context;
        this.isShowLoading = isShowLoading;
        initLoadingDialog(context);
    }

    private void initLoadingDialog(Context context) {
        if (loadingDialog != null) {
            loadingDialog.dismiss();
            loadingDialog = null;
        }
        if (context != null) {
            loadingDialog = HttpLoading.getInstance().initLoading(context);
        }
    }

    private void show() {
        if (loadingDialog == null) {
            initLoadingDialog(context);
        }
        if (loadingDialog != null && !loadingDialog.isShowing() && isShowLoading) {
            loadingDialog.dismiss();
            loadingDialog.show();
        }
    }

    private void dismiss() {
        if (loadingDialog == null) {
            initLoadingDialog(context);
        }
        if (null != loadingDialog) {
            loadingDialog.dismiss();
            loadingDialog = null;
        }
    }

    @Override
    public void onBefore(BaseRequest request) {
        super.onBefore(request);
        OkGo.getInstance().setCookieStore(App.getCookieStore(request.getBaseUrl()));
        show();
    }

    @Override
    public void onSuccess(T t, Call call, Response response) {
        try {
            String jsonString;
            Type type = this.getClass().getGenericSuperclass();
            if (type instanceof ParameterizedType) {
                //如果用户写了泛型，就会进入这里，否者不会执行
                ParameterizedType parameterizedType = (ParameterizedType) type;
                Type beanType = parameterizedType.getActualTypeArguments()[0];
                if (beanType == String.class) {
                    //如果是String类型，直接返回字符串
                    jsonString = (String) t;
                } else {
                    jsonString = new Gson().toJson(t, beanType);
                }
            } else {
                jsonString = response.body().toString();
            }
            response.header("cookie");
            if (!TextUtils.isEmpty(jsonString)) {
                JSONObject jsonObject = new JSONObject(jsonString);
                String stateCode = jsonObject.getString("stateCode");

                switch (stateCode) {
                    case "1020":
                    case "1021":
                        AppUtils.checkUpdate((Activity) context, "");
                        break;
                    case "1000"://成功
                    case "1004"://手势密码错误
                        onCall(t, call, response);
                        break;
                    case "1009"://账号密码错误
                        ToastUtils.showToast(context, jsonObject.getString("message"));
                        break;
                    case "1001"://园区负责人为空
                        ToastUtils.showToast(context, jsonObject.getString("message"));
                        break;
                    case "1012"://验证码错误
                        ToastUtils.showToast(context, jsonObject.getString("message"));
                        break;
                    case "1002"://token异常
                        final DialogOne2 dialogOne2 = new DialogOne2(context);
                        dialogOne2.show(jsonObject.getString("message"));
                        dialogOne2.setOnSureClickListener(new DialogOne2.OnSureClickListener() {
                            @Override
                            public void sureClick() {
                                LoginManager.getInstance().clearLogin();
                                Intent intent = new Intent(context, LoginAc.class);
                                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);
                                context.startActivity(intent);
                                dialogOne2.dismiss();
                            }
                        });

                        break;
                    case App.parseError: //解析错误
//                        ToastUtils.showToast(context, "数据格式解析错误,请反馈...");
                        onError(call, response, new Exception());
                        break;

                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            //☆☆☆☆提交到bugly☆☆☆☆
//            ToastUtils.showToast(context, "数据格式异常错误,请反馈...");
            onError(call, response, new Exception());
        }
    }

    @Override
    public void onError(Call call, Response response, Exception e) {
        super.onError(call, response, e);
        if (response == null || "".equals(response)) {
//            ToastUtils.showMessage("网络请求失败");
            return;
        }
        int code = response.code();
        switch (code) {
            case 401://登录超时
//                ToastUtils.showMessage("登录超时");
//                context.startActivity(new Intent(context, LoginPhoneAc.class));
                break;
            default:
//                ToastUtils.showMessage("网络请求失败");
                break;
        }
    }

    @Override
    public void onAfter(T t, Exception e) {
        super.onAfter(t, e);
        dismiss();
    }

    @Override
    public T convertSuccess(Response response) throws Exception {
//        //以下代码是通过泛型解析实际参数,泛型必须传
//
//        //com.lzy.demo.callback.DialogCallback<com.lzy.demo.model.Login> 得到类的泛型，包括了泛型参数
//        Type genType = getClass().getGenericSuperclass();
//        //从上述的类中取出真实的泛型参数，有些类可能有多个泛型，所以是数值
//        Type[] params = ((ParameterizedType) genType).getActualTypeArguments();
//        //我们的示例代码中，只有一个泛型，所以取出第一个，得到如下结果
//        //com.lzy.demo.model.Login
//        Type type = params[0];
//
//        //这里我们既然都已经拿到了泛型的真实类型，即对应的 class ，那么当然可以开始解析数据了，我们采用 Gson 解析
//        //以下代码是根据泛型解析数据，返回对象，返回的对象自动以参数的形式传递到 onSuccess 中，可以直接使用
//        JsonReader jsonReader = new JsonReader(response.body().charStream());
//        //有数据类型，表示有data
//        T data = new Gson().fromJson(jsonReader, type);
//        response.close();
//        return data;
        try {
            Type type = this.getClass().getGenericSuperclass();
            if (type instanceof ParameterizedType) {
                //如果用户写了泛型，就会进入这里，否者不会执行
                ParameterizedType parameterizedType = (ParameterizedType) type;
                Type beanType = parameterizedType.getActualTypeArguments()[0];
                if (beanType == String.class) {//如果是String类型，直接返回字符串

                    return (T) response.body().string();
                } else {
                    //如果是 Bean List Map ，则解析完后返回
                    return new Gson().fromJson(response.body().string(), beanType);
                }
            } else {
                //如果没有写泛型，直接返回Response对象
                return (T) response;
            }
        } catch (Exception ex) {
            return (T) new Gson().toJson(getNormalEntity(ex.getMessage()));
        }
    }

    private BaseEntity getNormalEntity(String message) {
        BaseEntity normalEntity = new BaseEntity();
        normalEntity.setStateCode(App.parseError);
        normalEntity.setMessage(message);
        return normalEntity;
    }

    /**
     * 对返回数据进行操作的回调， UI线程
     */
    public abstract void onCall(T t, Call call, Response response) throws JSONException;
}
